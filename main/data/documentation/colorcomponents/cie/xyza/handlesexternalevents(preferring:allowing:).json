{
  "abstract" : [
    {
      "text" : "Specifies the external events that the view’s scene handles",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "if the scene is already open.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/ColorComponents\/documentation\/ColorComponents",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZA"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZA\/handlesExternalEvents(preferring:allowing:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "SwiftUICore",
    "externalID" : "s:7SwiftUI4ViewPAAE21handlesExternalEvents10preferring8allowingQrShySSG_AGtF::SYNTHESIZED::s:15ColorComponents3CIEO4XYZAV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "handlesExternalEvents"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "preferring"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sh",
        "text" : "Set"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:SS",
        "text" : "String"
      },
      {
        "kind" : "text",
        "text" : ">, "
      },
      {
        "kind" : "externalParam",
        "text" : "allowing"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sh",
        "text" : "Set"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:SS",
        "text" : "String"
      },
      {
        "kind" : "text",
        "text" : ">) -> "
      },
      {
        "kind" : "keyword",
        "text" : "some"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI4ViewP",
        "text" : "View"
      }
    ],
    "modules" : [
      {
        "name" : "ColorComponents",
        "relatedModules" : [
          "SwiftUICore"
        ]
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "14.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "11.0",
        "name" : "macOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "handlesExternalEvents(preferring:allowing:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "attribute",
              "text" : "nonisolated"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "handlesExternalEvents"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "preferring"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sh",
              "text" : "Set"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:SS",
              "text" : "String"
            },
            {
              "kind" : "text",
              "text" : ">, "
            },
            {
              "kind" : "externalParam",
              "text" : "allowing"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sh",
              "text" : "Set"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:SS",
              "text" : "String"
            },
            {
              "kind" : "text",
              "text" : ">) -> "
            },
            {
              "kind" : "keyword",
              "text" : "some"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : "\n"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A set of strings that SwiftUI compares against the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "incoming user activity or URL to see if the view’s",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "scene prefers to handle the external event.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "preferring"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A set of strings that SwiftUI compares against the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "incoming user activity or URL to see if the view’s",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "scene can handle the exernal event.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "allowing"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A view whose enclosing scene — if already open —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "handles incoming external events.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Apply this modifier to a view to indicate whether an open scene that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "contains the view handles specified user activities or URLs that your",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "app receives. Specify two sets of string identifiers to distinguish",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "between the kinds of events that the scene ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "prefers",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to handle",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and those that it ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "can",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " handle. You can dynamically update the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "identifiers in each set to reflect changing app state.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When your app receives an event on a platform that supports multiple",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "simultaneous scenes, SwiftUI sends the event to the first",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "open scene it finds that prefers to handle the event. Otherwise,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "it sends the event to the first open scene it finds that can handle",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the event. If it finds neither — including when you don’t add",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this view modifier — SwiftUI creates a new scene for the event.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Don’t confuse this view modifier with the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "Scene\/handlesExternalEvents(matching:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "scene",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " modifier. You use",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the view modifier to indicate that an open scene handles certain",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "events, whereas you use the scene modifier to help SwiftUI choose a",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "new scene to open when no open scene handles the event.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Important",
          "style" : "important",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "On platforms that support only a single scene, SwiftUI ignores this",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "modifier and sends all external events to the one open scene.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Matching-an-event",
          "level" : 3,
          "text" : "Matching an event",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To find an open scene that handles a particular external event, SwiftUI",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "compares a property of the event against the strings that you specify",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the ",
              "type" : "text"
            },
            {
              "code" : "preferring",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "allowing",
              "type" : "codeVoice"
            },
            {
              "text" : " sets. SwiftUI examines the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "following event properties to perform the comparison:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "For an",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "doc:\/\/com.apple.documentation\/documentation\/Foundation\/NSUserActivity",
                      "type" : "text"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like when your app handles Handoff, SwiftUI uses the activity’s",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "doc:\/\/com.apple.documentation\/documentation\/Foundation\/NSUserActivity\/3238062-targetContentIdentifier",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "property, or if that’s ",
                      "type" : "text"
                    },
                    {
                      "code" : "nil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", its",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "doc:\/\/com.apple.documentation\/documentation\/Foundation\/NSUserActivity\/1418086-webpageurl",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "property rendered as an",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "doc:\/\/com.apple.documentation\/documentation\/Foundation\/URL\/1779984-absoluteString",
                      "type" : "text"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "For a",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "doc:\/\/com.apple.documentation\/documentation\/Foundation\/URL",
                      "type" : "text"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "like when another process opens a URL that your app handles,",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "SwiftUI uses the URL’s",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "doc:\/\/com.apple.documentation\/documentation\/Foundation\/URL\/1779984-absoluteString",
                      "type" : "text"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "For both parameter sets, an empty set of strings never matches.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarly, empty strings never match. Conversely, as a special case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the string that contains only an asterisk (",
              "type" : "text"
            },
            {
              "code" : "*",
              "type" : "codeVoice"
            },
            {
              "text" : ") matches anything.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The modifier performs string comparisons that are case and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "diacritic insensitive.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you specify multiple instances of this view modifier inside a single",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "scene, the scene uses the union of the respective ",
              "type" : "text"
            },
            {
              "code" : "preferring",
              "type" : "codeVoice"
            },
            {
              "text" : " and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "allowing",
              "type" : "codeVoice"
            },
            {
              "text" : " sets from all the modifiers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Handling-a-user-activity-in-an-open-scene",
          "level" : 3,
          "text" : "Handling a user activity in an open scene",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "As an example, the following view — which participates in Handoff",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "through the ",
              "type" : "text"
            },
            {
              "code" : "View\/userActivity(_:isActive:_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "View\/onContinueUserActivity(_:perform:)",
              "type" : "codeVoice"
            },
            {
              "text" : " methods — updates its",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "preferring",
              "type" : "codeVoice"
            },
            {
              "text" : " set according to the current selection. The enclosing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "scene prefers to handle an event for a contact that’s already selected,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but doesn’t volunteer itself as a preferred scene when no contact is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "selected:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "private struct ContactList: View {",
            "    var store: ContactStore",
            "    @State private var selectedContact: UUID?",
            "",
            "    var body: some View {",
            "        NavigationSplitView {",
            "            List(store.contacts, selection: $selectedContact) { contact in",
            "                NavigationLink(contact.name) {",
            "                    Text(contact.name)",
            "                }",
            "            }",
            "        } detail: {",
            "            Text(\"Select a contact\")",
            "        }",
            "        .handlesExternalEvents(",
            "            preferring: selectedContact == nil",
            "                ? []",
            "                : [selectedContact!.uuidString],",
            "            allowing: selectedContact == nil",
            "                ? [\"*\"]",
            "                : []",
            "        )",
            "        .onContinueUserActivity(Contact.userActivityType) { activity in",
            "            if let identifier = activity.targetContentIdentifier {",
            "                selectedContact = UUID(uuidString: identifier)",
            "            }",
            "        }",
            "        .userActivity(",
            "            Contact.userActivityType,",
            "            isActive: selectedContact != nil",
            "        ) { activity in",
            "            activity.title = \"Contact\"",
            "            activity.targetContentIdentifier = selectedContact?.uuidString",
            "            activity.isEligibleForHandoff = true",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The above code also updates the ",
              "type" : "text"
            },
            {
              "code" : "allowing",
              "type" : "codeVoice"
            },
            {
              "text" : " set to indicate that the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "scene can handle any incoming event when there’s no current selection,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but that it can’t handle any event if the view already displays a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "contact. The ",
              "type" : "text"
            },
            {
              "code" : "preferring",
              "type" : "codeVoice"
            },
            {
              "text" : " set takes precedence in the special case",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "where the incoming event exactly matches the currently selected contact.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/colorcomponents\/cie\/xyza\/handlesexternalevents(preferring:allowing:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://ColorComponents/documentation/ColorComponents": {
  "abstract" : [
    {
      "text" : "Easily deal with various representations of colors.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ColorComponents",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents"
},
"doc://ColorComponents/documentation/ColorComponents/CIE": {
  "abstract" : [
    {
      "text" : "Namespace for all CIE components.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "CIE"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "CIE"
    }
  ],
  "role" : "symbol",
  "title" : "CIE",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/cie"
},
"doc://ColorComponents/documentation/ColorComponents/CIE/XYZA": {
  "abstract" : [
    {
      "text" : "An XYZA (x, y, z, alpha) color components representation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XYZA"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZA",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XYZA"
    }
  ],
  "role" : "symbol",
  "title" : "CIE.XYZA",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/cie\/xyza"
},
"doc://ColorComponents/documentation/ColorComponents/CIE/XYZA/handlesExternalEvents(preferring:allowing:)": {
  "abstract" : [
    {
      "text" : "Specifies the external events that the view’s scene handles",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "if the scene is already open.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "handlesExternalEvents"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "preferring"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sh",
      "text" : "Set"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ">, "
    },
    {
      "kind" : "externalParam",
      "text" : "allowing"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sh",
      "text" : "Set"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ">) -> "
    },
    {
      "kind" : "keyword",
      "text" : "some"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI4ViewP",
      "text" : "View"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZA\/handlesExternalEvents(preferring:allowing:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "handlesExternalEvents(preferring:allowing:)",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/cie\/xyza\/handlesexternalevents(preferring:allowing:)"
}
}
}