{
  "abstract" : [
    {
      "text" : "Layers the views that you specify behind this view.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/ColorComponents\/documentation\/ColorComponents",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZ"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZ\/background(alignment:content:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "SwiftUICore",
    "externalID" : "s:7SwiftUI4ViewPAAE10background9alignment7contentQrAA9AlignmentV_qd__yXEtAaBRd__lF::SYNTHESIZED::s:15ColorComponents3CIEO3XYZV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "background"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "genericParameter",
        "text" : "V"
      },
      {
        "kind" : "text",
        "text" : ">("
      },
      {
        "kind" : "externalParam",
        "text" : "alignment"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI9AlignmentV",
        "text" : "Alignment"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "content"
      },
      {
        "kind" : "text",
        "text" : ": () -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "V"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "keyword",
        "text" : "some"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI4ViewP",
        "text" : "View"
      }
    ],
    "modules" : [
      {
        "name" : "ColorComponents",
        "relatedModules" : [
          "SwiftUICore"
        ]
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "background(alignment:content:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "attribute",
              "text" : "nonisolated"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "background"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "V"
            },
            {
              "kind" : "text",
              "text" : ">("
            },
            {
              "kind" : "externalParam",
              "text" : "alignment"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI9AlignmentV",
              "text" : "Alignment"
            },
            {
              "kind" : "text",
              "text" : " = .center, "
            },
            {
              "kind" : "attribute",
              "text" : "@"
            },
            {
              "kind" : "attribute",
              "preciseIdentifier" : "s:7SwiftUI11ViewBuilderV",
              "text" : "ViewBuilder"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "externalParam",
              "text" : "content"
            },
            {
              "kind" : "text",
              "text" : ": () -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "V"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "keyword",
              "text" : "some"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "V"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : "\n"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The alignment that the modifier uses to position the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "implicit ",
                  "type" : "text"
                },
                {
                  "code" : "ZStack",
                  "type" : "codeVoice"
                },
                {
                  "text" : " that groups the background views. The default",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is ",
                  "type" : "text"
                },
                {
                  "code" : "Alignment\/center",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "alignment"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A ",
                  "type" : "text"
                },
                {
                  "code" : "ViewBuilder",
                  "type" : "codeVoice"
                },
                {
                  "text" : " that you use to declare the views to draw",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "behind this view, stacked in a cascading order from bottom to top.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The last view that you list appears at the front of the stack.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "content"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A view that uses the specified content as a background.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use this modifier to place one or more views behind another view.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, you can place a collection of stars beind a ",
              "type" : "text"
            },
            {
              "code" : "Text",
              "type" : "codeVoice"
            },
            {
              "text" : " view:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Text(\"ABCDEF\")",
            "    .background(alignment: .leading) { Star(color: .red) }",
            "    .background(alignment: .center) { Star(color: .green) }",
            "    .background(alignment: .trailing) { Star(color: .blue) }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above assumes that you’ve defined a ",
              "type" : "text"
            },
            {
              "code" : "Star",
              "type" : "codeVoice"
            },
            {
              "text" : " view with a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "parameterized color:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Star: View {",
            "    var color: Color",
            "",
            "    var body: some View {",
            "        Image(systemName: \"star.fill\")",
            "            .foregroundStyle(color)",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "By setting different ",
              "type" : "text"
            },
            {
              "code" : "alignment",
              "type" : "codeVoice"
            },
            {
              "text" : " values for each modifier, you make the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "stars appear in different places behind the text:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [

          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you specify more than one view in the ",
              "type" : "text"
            },
            {
              "code" : "content",
              "type" : "codeVoice"
            },
            {
              "text" : " closure, the modifier",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "collects all of the views in the closure into an implicit ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "taking them in order from back to front. For example, you can layer a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "vertical bar behind a circle, with both of those behind a horizontal",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "bar:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Color.blue",
            "    .frame(width: 200, height: 10) \/\/ Creates a horizontal bar.",
            "    .background {",
            "        Color.green",
            "            .frame(width: 10, height: 100) \/\/ Creates a vertical bar.",
            "        Circle()",
            "            .frame(width: 50, height: 50)",
            "    }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Both the background modifier and the implicit ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : " composed from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the background content — the circle and the vertical bar — use a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "default ",
              "type" : "text"
            },
            {
              "code" : "Alignment\/center",
              "type" : "codeVoice"
            },
            {
              "text" : " alignment. The vertical bar appears",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "centered behind the circle, and both appear as a composite view centered",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "behind the horizontal bar:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [

          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you specify an alignment for the background, it applies to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "implicit stack rather than to the individual views in the closure. You",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can see this if you add the ",
              "type" : "text"
            },
            {
              "code" : "Alignment\/leading",
              "type" : "codeVoice"
            },
            {
              "text" : " alignment:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Color.blue",
            "    .frame(width: 200, height: 10)",
            "    .background(alignment: .leading) {",
            "        Color.green",
            "            .frame(width: 10, height: 100)",
            "        Circle()",
            "            .frame(width: 50, height: 50)",
            "    }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The vertical bar and the circle move as a unit to align the stack",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the leading edge of the horizontal bar, while the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "vertical bar remains centered on the circle:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [

          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To control the placement of individual items inside the ",
              "type" : "text"
            },
            {
              "code" : "content",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "closure, either use a different background modifier for each item, as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the earlier example of stars under text demonstrates, or add an explicit",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : " inside the content closure with its own alignment:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Color.blue",
            "    .frame(width: 200, height: 10)",
            "    .background(alignment: .leading) {",
            "        ZStack(alignment: .leading) {",
            "            Color.green",
            "                .frame(width: 10, height: 100)",
            "            Circle()",
            "                .frame(width: 50, height: 50)",
            "        }",
            "    }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The stack alignment ensures that the circle’s leading edge aligns with",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the vertical bar’s, while the background modifier aligns the composite",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "view with the horizontal bar:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [

          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can achieve layering without a background modifier by putting both",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the modified view and the background content into a ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : ". This",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "produces a simpler view hierarchy, but it changes the layout priority",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that SwiftUI applies to the views. Use the background modifier when you",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "want the modified view to dominate the layout.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you want to specify a ",
              "type" : "text"
            },
            {
              "code" : "ShapeStyle",
              "type" : "codeVoice"
            },
            {
              "text" : " like a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "HierarchicalShapeStyle",
              "type" : "codeVoice"
            },
            {
              "text" : " or a ",
              "type" : "text"
            },
            {
              "code" : "Material",
              "type" : "codeVoice"
            },
            {
              "text" : " as the background, use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "View\/background(_:ignoresSafeAreaEdges:)",
              "type" : "codeVoice"
            },
            {
              "text" : " instead.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To specify a ",
              "type" : "text"
            },
            {
              "code" : "Shape",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "InsettableShape",
              "type" : "codeVoice"
            },
            {
              "text" : ", use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "View\/background(_:in:fillStyle:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To configure the background of a presentation, like a sheet, use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "View\/presentationBackground(alignment:content:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/colorcomponents\/cie\/xyz\/background(alignment:content:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://ColorComponents/documentation/ColorComponents": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ColorComponents",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents"
},
"doc://ColorComponents/documentation/ColorComponents/CIE": {
  "abstract" : [
    {
      "text" : "Namespace for all CIE components.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "CIE"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "CIE"
    }
  ],
  "role" : "symbol",
  "title" : "CIE",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/cie"
},
"doc://ColorComponents/documentation/ColorComponents/CIE/XYZ": {
  "abstract" : [
    {
      "text" : "An opaque XYZ color components representation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XYZ"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZ",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XYZ"
    }
  ],
  "role" : "symbol",
  "title" : "CIE.XYZ",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/cie\/xyz"
},
"doc://ColorComponents/documentation/ColorComponents/CIE/XYZ/background(alignment:content:)": {
  "abstract" : [
    {
      "text" : "Layers the views that you specify behind this view.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "background"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "V"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "alignment"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI9AlignmentV",
      "text" : "Alignment"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "content"
    },
    {
      "kind" : "text",
      "text" : ": () -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "V"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "keyword",
      "text" : "some"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI4ViewP",
      "text" : "View"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/CIE\/XYZ\/background(alignment:content:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "background(alignment:content:)",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/cie\/xyz\/background(alignment:content:)"
}
}
}