{
  "abstract" : [
    {
      "text" : "Specifies a custom alignment anchor for a view that acts as a grid cell.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/ColorComponents\/documentation\/ColorComponents",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSLA",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSLA\/View-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSLA\/gridCellAnchor(_:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "SwiftUI",
    "externalID" : "s:7SwiftUI4ViewPAAE14gridCellAnchoryQrAA9UnitPointVF::SYNTHESIZED::s:15ColorComponents4HSLAV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "gridCellAnchor"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI9UnitPointV",
        "text" : "UnitPoint"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "keyword",
        "text" : "some"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI4ViewP",
        "text" : "View"
      }
    ],
    "modules" : [
      {
        "name" : "ColorComponents"
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "16.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "16.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "9.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "gridCellAnchor(_:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "gridCellAnchor"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "_"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "anchor"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI9UnitPointV",
              "text" : "UnitPoint"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "keyword",
              "text" : "some"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : "\n"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A view that uses the specified anchor point to align its",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "content.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The unit point that defines how to align the view",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "within the bounds of its grid cell.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "anchor"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Grids, like stacks and other layout containers, perform most alignment",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "operations using alignment guides. The grid moves the contents of each",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "cell in a row in the y direction until the specified",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "VerticalAlignment",
              "type" : "codeVoice"
            },
            {
              "text" : " guide of each view in the row aligns with the same",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "guide of all the other views in the row. Similarly, the grid aligns the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "HorizontalAlignment",
              "type" : "codeVoice"
            },
            {
              "text" : " guides of views in a column by adjusting views",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in the x direction. See the guide types for more information about",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "typical SwiftUI alignment operations.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you use the ",
              "type" : "text"
            },
            {
              "code" : "gridCellAnchor(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " modifier on a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "view in a grid, the grid changes to an anchor-based alignment strategy",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for the associated cell. With anchor alignment, the grid projects a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "UnitPoint",
              "type" : "codeVoice"
            },
            {
              "text" : " that you specify onto both the view and the cell, and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "aligns the two projections. For example, consider the following grid:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Grid(horizontalSpacing: 1, verticalSpacing: 1) {",
            "    GridRow {",
            "        Color.red.frame(width: 60, height: 60)",
            "        Color.red.frame(width: 60, height: 60)",
            "    }",
            "    GridRow {",
            "        Color.red.frame(width: 60, height: 60)",
            "        Color.blue.frame(width: 10, height: 10)",
            "            .gridCellAnchor(UnitPoint(x: 0.25, y: 0.75))",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The grid creates red reference squares in the first row and column to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "establish row and column sizes. Without the anchor modifier, the blue",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "marker in the remaining cell would appear at the center of its cell,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because of the grid’s default ",
              "type" : "text"
            },
            {
              "code" : "Alignment\/center",
              "type" : "codeVoice"
            },
            {
              "text" : " alignment. With",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the anchor modifier shown in the code above, the grid aligns the one",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "quarter point of the marker with the one quarter point of its cell in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the x direction, as measured from the origin at the top left of the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "cell. The grid also aligns the three quarters point of the marker",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the three quarters point of the cell in the y direction:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "View-gridCellAnchor-1-iOS",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : "UnitPoint",
              "type" : "codeVoice"
            },
            {
              "text" : " defines many convenience points that correspond to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "typical alignment guides, which you can use as well. For example, you",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "can use ",
              "type" : "text"
            },
            {
              "code" : "UnitPoint\/topTrailing",
              "type" : "codeVoice"
            },
            {
              "text" : " to align the top and trailing edges",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of a view in a cell with the top and trailing edges of the cell:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Color.blue.frame(width: 10, height: 10)",
            "    .gridCellAnchor(.topTrailing)"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "View-gridCellAnchor-2-iOS",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Applying the anchor-based alignment strategy to a single cell",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doesn’t affect the alignment strategy that the grid uses on other cells.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Anchor-alignment-for-merged-cells",
          "level" : 3,
          "text" : "Anchor alignment for merged cells",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you use the ",
              "type" : "text"
            },
            {
              "code" : "View\/gridCellColumns(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " modifier to cause",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a cell to span more than one column, or if you place a view in a grid",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "outside of a row so that the view spans the entire grid, the grid",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "automatically converts its vertical and horizontal alignment guides",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the unit point equivalent for the merged cell, and uses an",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "anchor-based approach for that cell. For example, the following grid",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "places the marker at the center of the merged cell by converting the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "grid’s default ",
              "type" : "text"
            },
            {
              "code" : "Alignment\/center",
              "type" : "codeVoice"
            },
            {
              "text" : " alignment guide to a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "UnitPoint\/center",
              "type" : "codeVoice"
            },
            {
              "text" : " anchor for the blue marker in the merged cell:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Grid(alignment: .center, horizontalSpacing: 1, verticalSpacing: 1) {",
            "    GridRow {",
            "        Color.red.frame(width: 60, height: 60)",
            "        Color.red.frame(width: 60, height: 60)",
            "        Color.red.frame(width: 60, height: 60)",
            "    }",
            "    GridRow {",
            "        Color.red.frame(width: 60, height: 60)",
            "        Color.blue.frame(width: 10, height: 10)",
            "            .gridCellColumns(2)",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The grid makes this conversion in part to avoid ambiguity. Each column",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "has its own horizontal guide, and it isn’t clear which of these",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a cell that spans multiple columns should align with. Further, in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the example above, neither of the center alignment guides for the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "second or third column would provide the expected behavior, which is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to center the marker in the merged cell. Anchor alignment provides",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this behavior:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "View-gridCellAnchor-3-iOS",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/colorcomponents\/hsla\/gridcellanchor(_:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://ColorComponents/documentation/ColorComponents": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ColorComponents",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents"
},
"doc://ColorComponents/documentation/ColorComponents/HSLA": {
  "abstract" : [
    {
      "text" : "An HSLA (hue, saturation, luminance, alpha) color components representation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HSLA"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSLA",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HSLA"
    }
  ],
  "role" : "symbol",
  "title" : "HSLA",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsla"
},
"doc://ColorComponents/documentation/ColorComponents/HSLA/View-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSLA\/View-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "View Implementations",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsla\/view-implementations"
},
"doc://ColorComponents/documentation/ColorComponents/HSLA/gridCellAnchor(_:)": {
  "abstract" : [
    {
      "text" : "Specifies a custom alignment anchor for a view that acts as a grid cell.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "gridCellAnchor"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI9UnitPointV",
      "text" : "UnitPoint"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "keyword",
      "text" : "some"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI4ViewP",
      "text" : "View"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSLA\/gridCellAnchor(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "gridCellAnchor(_:)",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsla\/gridcellanchor(_:)"
}
}
}