{
  "abstract" : [
    {
      "text" : "Layers the views that you specify in front of this view.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/ColorComponents\/documentation\/ColorComponents",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSB",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSB\/View-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSB\/overlay(alignment:content:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "SwiftUI",
    "externalID" : "s:7SwiftUI4ViewPAAE7overlay9alignment7contentQrAA9AlignmentV_qd__yXEtAaBRd__lF::SYNTHESIZED::s:15ColorComponents3HSBV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "overlay"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "genericParameter",
        "text" : "V"
      },
      {
        "kind" : "text",
        "text" : ">("
      },
      {
        "kind" : "externalParam",
        "text" : "alignment"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI9AlignmentV",
        "text" : "Alignment"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "content"
      },
      {
        "kind" : "text",
        "text" : ": () -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "V"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "keyword",
        "text" : "some"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI4ViewP",
        "text" : "View"
      }
    ],
    "modules" : [
      {
        "name" : "ColorComponents"
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "overlay(alignment:content:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "overlay"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "V"
            },
            {
              "kind" : "text",
              "text" : ">("
            },
            {
              "kind" : "externalParam",
              "text" : "alignment"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI9AlignmentV",
              "text" : "Alignment"
            },
            {
              "kind" : "text",
              "text" : " = .center, "
            },
            {
              "kind" : "externalParam",
              "text" : "content"
            },
            {
              "kind" : "text",
              "text" : ": () -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "V"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "keyword",
              "text" : "some"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "V"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : "\n"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A view that uses the specified content as a foreground.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The alignment that the modifier uses to position the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "implicit ",
                  "type" : "text"
                },
                {
                  "code" : "ZStack",
                  "type" : "codeVoice"
                },
                {
                  "text" : " that groups the foreground views. The default",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is ",
                  "type" : "text"
                },
                {
                  "code" : "Alignment\/center",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "alignment"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A ",
                  "type" : "text"
                },
                {
                  "code" : "ViewBuilder",
                  "type" : "codeVoice"
                },
                {
                  "text" : " that you use to declare the views to",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "draw in front of this view, stacked in the order that you list them.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The last view that you list appears at the front of the stack.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "content"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use this modifier to place one or more views in front of another view.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, you can place a group of stars on a ",
              "type" : "text"
            },
            {
              "code" : "RoundedRectangle",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "RoundedRectangle(cornerRadius: 8)",
            "    .frame(width: 200, height: 100)",
            "    .overlay(alignment: .topLeading) { Star(color: .red) }",
            "    .overlay(alignment: .topTrailing) { Star(color: .yellow) }",
            "    .overlay(alignment: .bottomLeading) { Star(color: .green) }",
            "    .overlay(alignment: .bottomTrailing) { Star(color: .blue) }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The example above assumes that you’ve defined a ",
              "type" : "text"
            },
            {
              "code" : "Star",
              "type" : "codeVoice"
            },
            {
              "text" : " view with a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "parameterized color:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Star: View {",
            "    var color = Color.yellow",
            "",
            "    var body: some View {",
            "        Image(systemName: \"star.fill\")",
            "            .foregroundStyle(color)",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "By setting different ",
              "type" : "text"
            },
            {
              "code" : "alignment",
              "type" : "codeVoice"
            },
            {
              "text" : " values for each modifier, you make the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "stars appear in different places on the rectangle:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "View-overlay-2",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you specify more than one view in the ",
              "type" : "text"
            },
            {
              "code" : "content",
              "type" : "codeVoice"
            },
            {
              "text" : " closure, the modifier",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "collects all of the views in the closure into an implicit ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "taking them in order from back to front. For example, you can place a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "star and a ",
              "type" : "text"
            },
            {
              "code" : "Circle",
              "type" : "codeVoice"
            },
            {
              "text" : " on a field of ",
              "type" : "text"
            },
            {
              "code" : "ShapeStyle\/blue",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Color.blue",
            "    .frame(width: 200, height: 200)",
            "    .overlay {",
            "        Circle()",
            "            .frame(width: 100, height: 100)",
            "        Star()",
            "    }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Both the overlay modifier and the implicit ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : " composed from the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "overlay content — the circle and the star — use a default",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Alignment\/center",
              "type" : "codeVoice"
            },
            {
              "text" : " alignment. The star appears centered on the circle,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and both appear as a composite view centered in front of the square:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "View-overlay-3",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you specify an alignment for the overlay, it applies to the implicit",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "stack rather than to the individual views in the closure. You can see",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "this if you add the ",
              "type" : "text"
            },
            {
              "code" : "Alignment\/bottom",
              "type" : "codeVoice"
            },
            {
              "text" : " alignment:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Color.blue",
            "    .frame(width: 200, height: 200)",
            "    .overlay(alignment: .bottom) {",
            "        Circle()",
            "            .frame(width: 100, height: 100)",
            "        Star()",
            "    }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The circle and the star move down as a unit to align the stack’s bottom",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "edge with the bottom edge of the square, while the star remains",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "centered on the circle:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "View-overlay-3a",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To control the placement of individual items inside the ",
              "type" : "text"
            },
            {
              "code" : "content",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "closure, either use a different overlay modifier for each item, as the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "earlier example of stars in the corners of a rectangle demonstrates, or",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "add an explicit ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : " inside the content closure with its own",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "alignment:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Color.blue",
            "    .frame(width: 200, height: 200)",
            "    .overlay(alignment: .bottom) {",
            "        ZStack(alignment: .bottom) {",
            "            Circle()",
            "                .frame(width: 100, height: 100)",
            "            Star()",
            "        }",
            "    }"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The stack alignment ensures that the star’s bottom edge aligns with the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "circle’s, while the overlay aligns the composite view with the square:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "identifier" : "View-overlay-4",
              "type" : "image"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can achieve layering without an overlay modifier by putting both the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "modified view and the overlay content into a ",
              "type" : "text"
            },
            {
              "code" : "ZStack",
              "type" : "codeVoice"
            },
            {
              "text" : ". This can",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "produce a simpler view hierarchy, but changes the layout priority that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "SwiftUI applies to the views. Use the overlay modifier when you want the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "modified view to dominate the layout.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you want to specify a ",
              "type" : "text"
            },
            {
              "code" : "ShapeStyle",
              "type" : "codeVoice"
            },
            {
              "text" : " like a ",
              "type" : "text"
            },
            {
              "code" : "Color",
              "type" : "codeVoice"
            },
            {
              "text" : " or a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Material",
              "type" : "codeVoice"
            },
            {
              "text" : " as the overlay, use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "View\/overlay(_:ignoresSafeAreaEdges:)",
              "type" : "codeVoice"
            },
            {
              "text" : " instead. To specify a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Shape",
              "type" : "codeVoice"
            },
            {
              "text" : ", use ",
              "type" : "text"
            },
            {
              "code" : "View\/overlay(_:in:fillStyle:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/colorcomponents\/hsb\/overlay(alignment:content:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://ColorComponents/documentation/ColorComponents": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ColorComponents",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents"
},
"doc://ColorComponents/documentation/ColorComponents/HSB": {
  "abstract" : [
    {
      "text" : "An opaque HSB (hue, saturation, brightness) color components representation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HSB"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSB",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HSB"
    }
  ],
  "role" : "symbol",
  "title" : "HSB",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsb"
},
"doc://ColorComponents/documentation/ColorComponents/HSB/View-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSB\/View-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "View Implementations",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsb\/view-implementations"
},
"doc://ColorComponents/documentation/ColorComponents/HSB/overlay(alignment:content:)": {
  "abstract" : [
    {
      "text" : "Layers the views that you specify in front of this view.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "overlay"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "V"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "alignment"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI9AlignmentV",
      "text" : "Alignment"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "content"
    },
    {
      "kind" : "text",
      "text" : ": () -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "V"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "keyword",
      "text" : "some"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI4ViewP",
      "text" : "View"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSB\/overlay(alignment:content:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "overlay(alignment:content:)",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsb\/overlay(alignment:content:)"
}
}
}