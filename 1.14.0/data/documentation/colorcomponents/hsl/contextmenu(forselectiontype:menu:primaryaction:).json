{
  "abstract" : [
    {
      "text" : "Adds an item-based context menu to a view.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/ColorComponents\/documentation\/ColorComponents",
        "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSL"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSL\/contextMenu(forSelectionType:menu:primaryAction:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "SwiftUICore",
    "externalID" : "s:7SwiftUI4ViewPAAE11contextMenu16forSelectionType4menu13primaryActionQrqd__m_qd_0_Shyqd__GcyAHcSgtSHRd__AaBRd_0_r0_lF::SYNTHESIZED::s:15ColorComponents3HSLV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "contextMenu"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "genericParameter",
        "text" : "I"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "genericParameter",
        "text" : "M"
      },
      {
        "kind" : "text",
        "text" : ">("
      },
      {
        "kind" : "externalParam",
        "text" : "forSelectionType"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "I"
      },
      {
        "kind" : "text",
        "text" : ".Type, "
      },
      {
        "kind" : "externalParam",
        "text" : "menu"
      },
      {
        "kind" : "text",
        "text" : ": ("
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sh",
        "text" : "Set"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "typeIdentifier",
        "text" : "I"
      },
      {
        "kind" : "text",
        "text" : ">) -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "M"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "primaryAction"
      },
      {
        "kind" : "text",
        "text" : ": (("
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sh",
        "text" : "Set"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "typeIdentifier",
        "text" : "I"
      },
      {
        "kind" : "text",
        "text" : ">) -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:s4Voida",
        "text" : "Void"
      },
      {
        "kind" : "text",
        "text" : ")?) -> "
      },
      {
        "kind" : "keyword",
        "text" : "some"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7SwiftUI4ViewP",
        "text" : "View"
      }
    ],
    "modules" : [
      {
        "name" : "ColorComponents",
        "relatedModules" : [
          "SwiftUICore"
        ]
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "16.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "macOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "contextMenu(forSelectionType:menu:primaryAction:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "attribute",
              "text" : "nonisolated"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "contextMenu"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "I"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "genericParameter",
              "text" : "M"
            },
            {
              "kind" : "text",
              "text" : ">("
            },
            {
              "kind" : "externalParam",
              "text" : "forSelectionType"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "itemType"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "I"
            },
            {
              "kind" : "text",
              "text" : ".Type = I.self, "
            },
            {
              "kind" : "attribute",
              "text" : "@"
            },
            {
              "kind" : "attribute",
              "preciseIdentifier" : "s:7SwiftUI11ViewBuilderV",
              "text" : "ViewBuilder"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "externalParam",
              "text" : "menu"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "keyword",
              "text" : "@escaping"
            },
            {
              "kind" : "text",
              "text" : " ("
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sh",
              "text" : "Set"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "typeIdentifier",
              "text" : "I"
            },
            {
              "kind" : "text",
              "text" : ">) -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "M"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "primaryAction"
            },
            {
              "kind" : "text",
              "text" : ": (("
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sh",
              "text" : "Set"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "typeIdentifier",
              "text" : "I"
            },
            {
              "kind" : "text",
              "text" : ">) -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:s4Voida",
              "text" : "Void"
            },
            {
              "kind" : "text",
              "text" : ")? = nil) -> "
            },
            {
              "kind" : "keyword",
              "text" : "some"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "I"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:SH",
              "text" : "Hashable"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "M"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7SwiftUI4ViewP",
              "text" : "View"
            },
            {
              "kind" : "text",
              "text" : "\n"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The identifier type of the items. Ensure that this",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "matches the containerâ€™s selection type.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "itemType"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A closure that produces the menu. A single parameter to the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "closure contains the set of items to act on. An empty set indicates",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "menu activation over the empty area of the selectable container,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "while a non-empty set indicates menu activation over selected items.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Use controls like ",
                  "type" : "text"
                },
                {
                  "code" : "Button",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "Picker",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", and ",
                  "type" : "text"
                },
                {
                  "code" : "Toggle",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to define",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the menu items. You can also create submenus using ",
                  "type" : "text"
                },
                {
                  "code" : "Menu",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", or",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "group items with ",
                  "type" : "text"
                },
                {
                  "code" : "Section",
                  "type" : "codeVoice"
                },
                {
                  "text" : ". You can deactivate the context menu",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by returning nothing from the closure.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "menu"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A closure that defines the action to perform in",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "response to the primary interaction. A single parameter to the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "closure contains the set of items to act on.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "primaryAction"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A view that can display an item-based context menu.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can add an item-based context menu to a container that supports",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "selection, like a ",
              "type" : "text"
            },
            {
              "code" : "List",
              "type" : "codeVoice"
            },
            {
              "text" : " or a ",
              "type" : "text"
            },
            {
              "code" : "Table",
              "type" : "codeVoice"
            },
            {
              "text" : ". In the closure that you",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "use to define the menu, you receive a collection of items that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "depends on the selection state of the container and the location where",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the person clicks or taps to activate the menu. The collection contains:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The selected item or items, when people initiate the context menu",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "from any selected item.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Nothing, if people tap or click to activate the context menu from",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "an empty part of the container. This is true even when one or more",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "items is currently selected.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can vary the menu contents according to the number of selected",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "items. For example, the following code has a list that defines an",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "empty area menu, a single item menu, and a multi-item menu:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct ContextMenuItemExample: View {",
            "    var items: [Item]",
            "    @State private var selection = Set<Item.ID>()",
            "",
            "    var body: some View {",
            "        List(selection: $selection) {",
            "            ForEach(items) { item in",
            "                Text(item.name)",
            "            }",
            "        }",
            "        .contextMenu(forSelectionType: Item.ID.self) { items in",
            "            if items.isEmpty { \/\/ Empty area menu.",
            "                Button(\"New Item\") { }",
            "",
            "            } else if items.count == 1 { \/\/ Single item menu.",
            "                Button(\"Copy\") { }",
            "                Button(\"Delete\", role: .destructive) { }",
            "",
            "            } else { \/\/ Multi-item menu.",
            "                Button(\"Copy\") { }",
            "                Button(\"New Folder With Selection\") { }",
            "                Button(\"Delete Selected\", role: .destructive) { }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The above example assumes that the ",
              "type" : "text"
            },
            {
              "code" : "Item",
              "type" : "codeVoice"
            },
            {
              "text" : " type conforms to the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "doc:\/\/com.apple.documentation\/documentation\/Swift\/Identifiable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "protocol, and relies on the associated ",
              "type" : "text"
            },
            {
              "code" : "ID",
              "type" : "codeVoice"
            },
            {
              "text" : " type for both selection",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and context menu presentation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you add the modifier to a view hierarchy that doesnâ€™t have a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "container that supports selection, the context menu never activates.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To add a context menu that doesnâ€™t depend on selection behavior, use",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "View\/contextMenu(menuItems:)",
              "type" : "codeVoice"
            },
            {
              "text" : ". To add a context menu to a specific",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "row in a table, use ",
              "type" : "text"
            },
            {
              "code" : "TableRowContent\/contextMenu(menuItems:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Add-a-primary-action",
          "level" : 3,
          "text" : "Add a primary action",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Optionally, you can add a custom primary action to the context menu. In",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "macOS, a single click on a row in a selectable container selects that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "row, and a double click performs the primary action. In iOS and iPadOS,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "tapping on the row activates the primary action. To select a row",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without performing an action, either enter edit mode or hold",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "shift or command on a keyboard while tapping the row.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, you can modify the context menu from the previous example",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so that double clicking the row on macOS opens a new window for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "selected items. Get the ",
              "type" : "text"
            },
            {
              "code" : "OpenWindowAction",
              "type" : "codeVoice"
            },
            {
              "text" : " from the environment:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@Environment(\\.openWindow) private var openWindow"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Then call ",
              "type" : "text"
            },
            {
              "code" : "EnvironmentValues\/openWindow",
              "type" : "codeVoice"
            },
            {
              "text" : " from inside the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "primaryAction",
              "type" : "codeVoice"
            },
            {
              "text" : " closure for each item:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            ".contextMenu(forSelectionType: Item.ID.self) { items in",
            "    \/\/ ...",
            "} primaryAction: { items in",
            "    for item in items {",
            "        openWindow(value: item)",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The open window action depends on the declaration of a ",
              "type" : "text"
            },
            {
              "code" : "WindowGroup",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "scene in your ",
              "type" : "text"
            },
            {
              "code" : "App",
              "type" : "codeVoice"
            },
            {
              "text" : " that responds to the ",
              "type" : "text"
            },
            {
              "code" : "Item",
              "type" : "codeVoice"
            },
            {
              "text" : " type:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "WindowGroup(\"Item Detail\", for: Item.self) { $item in",
            "    \/\/ ...",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/colorcomponents\/hsl\/contextmenu(forselectiontype:menu:primaryaction:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://ColorComponents/documentation/ColorComponents": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ColorComponents",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents"
},
"doc://ColorComponents/documentation/ColorComponents/HSL": {
  "abstract" : [
    {
      "text" : "An opaque HSL (hue, saturation, luminance) color components representation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HSL"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSL",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HSL"
    }
  ],
  "role" : "symbol",
  "title" : "HSL",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsl"
},
"doc://ColorComponents/documentation/ColorComponents/HSL/contextMenu(forSelectionType:menu:primaryAction:)": {
  "abstract" : [
    {
      "text" : "Adds an item-based context menu to a view.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "contextMenu"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "I"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "M"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "forSelectionType"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "I"
    },
    {
      "kind" : "text",
      "text" : ".Type, "
    },
    {
      "kind" : "externalParam",
      "text" : "menu"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sh",
      "text" : "Set"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "I"
    },
    {
      "kind" : "text",
      "text" : ">) -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "M"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "primaryAction"
    },
    {
      "kind" : "text",
      "text" : ": (("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sh",
      "text" : "Set"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "I"
    },
    {
      "kind" : "text",
      "text" : ">) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ")?) -> "
    },
    {
      "kind" : "keyword",
      "text" : "some"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7SwiftUI4ViewP",
      "text" : "View"
    }
  ],
  "identifier" : "doc:\/\/ColorComponents\/documentation\/ColorComponents\/HSL\/contextMenu(forSelectionType:menu:primaryAction:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "contextMenu(forSelectionType:menu:primaryAction:)",
  "type" : "topic",
  "url" : "\/documentation\/colorcomponents\/hsl\/contextmenu(forselectiontype:menu:primaryaction:)"
}
}
}